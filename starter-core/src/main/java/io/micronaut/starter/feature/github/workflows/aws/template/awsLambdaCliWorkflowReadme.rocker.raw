@import io.micronaut.starter.application.Project
@import io.micronaut.starter.feature.github.workflows.GitHubWorkflowFeature
@import static io.micronaut.starter.feature.github.workflows.aws.AbstractAwsLambdaWorkflow.AWS_DEFAULT_REGION
@import static io.micronaut.starter.feature.github.workflows.aws.AbstractAwsLambdaWorkflow.AWS_DEFAULT_FUNCTION_MEMORY
@import static io.micronaut.starter.feature.github.workflows.aws.AbstractAwsLambdaWorkflow.AWS_DEFAULT_FUNCTION_TIMEOUT

@args (
GitHubWorkflowFeature feature,
Project project,
String workflowFilePath
)


## @feature.getTitle()

Workflow file: [`@workflowFilePath`](@workflowFilePath)

### Workflow description
For pushes to the `master` branch, the workflow will:
1. Setup the build environment with respect to the selected java/graalvm version.
3. Login to [AWS CLI](https://aws.amazon.com/cli/).
4. Build micronaut application.
5. Deploy to [AWS Lambda](https://aws.amazon.com/lambda/).

### Dependencies on other GitHub Actions
- [Setup GraalVM `DeLaGuardo/setup-graalvm`](https://github.com/DeLaGuardo/setup-graalvm)
- [Configure AWS Credentials `aws-actions/configure-aws-credentials`](https://github.com/aws-actions/configure-aws-credentials)

### Setup
Add the following GitHub secrets:

| Name | Description |
| ---- | ----------- |
@for (secret : feature.getSecrets()) {
| @secret.getName() | @secret.getDescription() |
}


The workflow file also contains additional configuration options that are now configured to:

| Name | Description | Default value |
| ---- | ----------- | ------------- |
| FUNCTION_TIMEOUT | The amount of time that Lambda allows a function to run before stopping it. | `@AWS_DEFAULT_FUNCTION_TIMEOUT` |
| FUNCTION_MEMORY | The amount of memory available to the function at runtime. | `@AWS_DEFAULT_FUNCTION_MEMORY` |
| AWS_REGION | The AWS Region where the function is created. | `@AWS_DEFAULT_REGION` |


### Verification

